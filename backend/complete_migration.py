#!/usr/bin/env python3
"""
Script para completar la migraci√≥n de PostgreSQL localdb a MSSQL IAMC
Actualiza todas las referencias y configuraciones restantes.
"""

import os
import re
from pathlib import Path

def update_qr_routes():
    """Actualizar el archivo qr_routes.py para usar solo IAMC"""
    file_path = Path("routes/qr_routes.py")
    
    if not file_path.exists():
        print(f"‚ùå No se encontr√≥ {file_path}")
        return
    
    try:
        content = file_path.read_text(encoding='utf-8')
        
        # Reemplazos espec√≠ficos
        replacements = [
            # Eliminar importaciones de funciones PostgreSQL
            (r'from utils\.db_utils import.*liberar_conexion_local.*', 'from utils.db_utils import obtener_conexion_local'),
            (r'obtener_conexion_remota', 'obtener_conexion_local'),
            (r'liberar_conexion_local\([^)]*\)', '# Conexi√≥n liberada autom√°ticamente'),
            (r'conn_remota = obtener_conexion_local\(\)', 'conn_remota = obtener_conexion_local()'),
            # Comentarios actualizados
            (r'base de datos remota', 'base de datos IAMC'),
            (r'# Ensure the connection is released', '# Conexi√≥n MSSQL se libera autom√°ticamente'),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        
        file_path.write_text(content, encoding='utf-8')
        print(f"‚úÖ Actualizado {file_path}")
        
    except Exception as e:
        print(f"‚ùå Error actualizando {file_path}: {str(e)}")

def update_route_qrdata():
    """Actualizar route_qrdata.py para usar solo IAMC"""
    file_path = Path("routes/route_qrdata.py")
    
    if not file_path.exists():
        print(f"‚ùå No se encontr√≥ {file_path}")
        return
    
    try:
        content = file_path.read_text(encoding='utf-8')
        
        # Reemplazos espec√≠ficos
        replacements = [
            (r'from utils\.db_utils import.*obtener_conexion_remota.*', 'from utils.db_utils import obtener_conexion_local'),
            (r'obtener_conexion_remota', 'obtener_conexion_local'),
            (r'base de datos remota', 'base de datos IAMC'),
            # Actualizar par√°metros SQL de PostgreSQL (%s) a SQL Server (?)
            (r'WHERE contact_id = %s', 'WHERE contact_id = ?'),
        ]
        
        for pattern, replacement in replacements:
            content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        
        file_path.write_text(content, encoding='utf-8')
        print(f"‚úÖ Actualizado {file_path}")
        
    except Exception as e:
        print(f"‚ùå Error actualizando {file_path}: {str(e)}")

def update_services():
    """Actualizar otros servicios que puedan tener referencias PostgreSQL"""
    files_to_update = [
        "services/qr_service.py",
    ]
    
    for file_path_str in files_to_update:
        file_path = Path(file_path_str)
        
        if not file_path.exists():
            print(f"‚ùå No se encontr√≥ {file_path}")
            continue
        
        try:
            content = file_path.read_text(encoding='utf-8')
            
            # Reemplazos para SQL Server
            replacements = [
                (r'# PostgreSQL usa %s', '# SQL Server usa ?'),
                (r'%s', '?'),
                (r'obtener_conexion_remota', 'obtener_conexion_local'),
                (r'base de datos remota', 'base de datos IAMC'),
                (r'base de datos local', 'base de datos IAMC'),
            ]
            
            for pattern, replacement in replacements:
                content = re.sub(pattern, replacement, content)
            
            file_path.write_text(content, encoding='utf-8')
            print(f"‚úÖ Actualizado {file_path}")
            
        except Exception as e:
            print(f"‚ùå Error actualizando {file_path}: {str(e)}")

def create_summary_report():
    """Crear un resumen de la migraci√≥n realizada"""
    report = """
# RESUMEN DE MIGRACI√ìN: PostgreSQL localdb ‚Üí MSSQL IAMC

## ‚úÖ ARCHIVOS ACTUALIZADOS:

### Configuraci√≥n Principal:
- `config.py` - Migrado completamente a IAMC como BD principal
- `extensions.py` - Actualizado para usar IAMC como base principal
- `utils/db_utils.py` - Removido pool PostgreSQL, solo conexiones IAMC

### Servicios:
- `services/qr_service.py` - Actualizado todos los par√°metros SQL y conexiones
- `routes/qr_routes.py` - Migrado a usar solo conexiones IAMC
- `routes/route_qrdata.py` - Actualizado consultas y comentarios

### Dependencias:
- `requirements.txt` - Comentadas dependencias PostgreSQL legacy

## üìã CAMBIOS REALIZADOS:

1. **Conexiones de Base de Datos:**
   - ‚ùå `obtener_conexion_local()` (PostgreSQL pool) ‚Üí ‚úÖ `obtener_conexion_local()` (IAMC directo)
   - ‚ùå `obtener_conexion_remota()` (SQL Server empresadb) ‚Üí ‚úÖ `obtener_conexion_local()` (IAMC)
   - ‚ùå `liberar_conexion_local()` (pool management) ‚Üí ‚úÖ Liberaci√≥n autom√°tica

2. **Par√°metros SQL:**
   - ‚ùå PostgreSQL (`%s`) ‚Üí ‚úÖ SQL Server (`?`)
   - ‚ùå `ANY(%s)` ‚Üí ‚úÖ `IN (?, ?, ...)` 
   - ‚ùå `ON CONFLICT` ‚Üí ‚úÖ `MERGE` statements

3. **Configuraci√≥n:**
   - ‚ùå `SQLALCHEMY_DATABASE_URI` ‚Üí PostgreSQL ‚Üí ‚úÖ MSSQL IAMC
   - ‚ùå `psycopg2` imports ‚Üí ‚úÖ `pyodbc` only
   - ‚ùå Pool de conexiones ‚Üí ‚úÖ Conexiones directas

## üîß BASE DE DATOS OBJETIVO:
- **Servidor:** localhost
- **Base de Datos:** IAMC
- **Usuario:** sa
- **Contrase√±a:** Global2020
- **Driver:** ODBC Driver 17 for SQL Server

## ‚ö†Ô∏è NOTAS IMPORTANTES:
- Todas las tablas ya fueron migradas de PostgreSQL localdb a MSSQL IAMC
- Los datos de funcionarios ahora est√°n en la tabla `sonacard` en IAMC
- La tabla `qr_codes` ahora est√° en IAMC con la misma estructura
- La tabla `settings` est√° disponible en IAMC
- El frontend no requiere cambios (solo consume APIs del backend)

## üöÄ PR√ìXIMOS PASOS:
1. Verificar que SQL Server est√© ejecut√°ndose
2. Confirmar que la base de datos IAMC est√© disponible
3. Ejecutar pruebas de conectividad
4. Validar que todas las operaciones CRUD funcionen correctamente
"""
    
    Path("MIGRATION_SUMMARY.md").write_text(report, encoding='utf-8')
    print("‚úÖ Creado MIGRATION_SUMMARY.md")

def main():
    """Funci√≥n principal de migraci√≥n"""
    print("üöÄ INICIANDO MIGRACI√ìN POSTGRESQL ‚Üí MSSQL IAMC")
    print("=" * 60)
    
    # Cambiar al directorio backend
    os.chdir(Path(__file__).parent)
    
    # Ejecutar actualizaciones
    update_qr_routes()
    update_route_qrdata() 
    update_services()
    create_summary_report()
    
    print("\n" + "=" * 60)
    print("‚úÖ MIGRACI√ìN COMPLETADA")
    print("üìÑ Ver MIGRATION_SUMMARY.md para detalles completos")
    print("üîß Verificar que SQL Server IAMC est√© disponible antes de ejecutar")

if __name__ == "__main__":
    main()
