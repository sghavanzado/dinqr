#!/usr/bin/env python3
"""
Diagn√≥stico final de la migraci√≥n completa PostgreSQL ‚Üí MSSQL
"""

def test_complete_system():
    """Probar todo el sistema despu√©s de la migraci√≥n"""
    print("üîß DIAGN√ìSTICO FINAL DE MIGRACI√ìN")
    print("=" * 60)
    
    # Test 1: Conexiones
    try:
        from utils.db_utils import obtener_conexion_local, obtener_conexion_remota
        
        # IAMC - Tablas del sistema
        with obtener_conexion_local() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM settings")
            settings_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM qr_codes")
            qr_count = cursor.fetchone()[0]
            print(f"‚úÖ IAMC (sistema): {settings_count} configuraciones, {qr_count} QR codes")
        
        # empresadb - Datos de funcionarios
        with obtener_conexion_remota() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM sonacard")
            funcionarios_count = cursor.fetchone()[0]
            print(f"‚úÖ empresadb (sonacard): {funcionarios_count} funcionarios")
            
    except Exception as e:
        print(f"‚ùå Error en conexiones: {str(e)}")
        return False
    
    # Test 2: Servicios
    try:
        from services.qr_service import obtener_carpeta_salida, obtener_total_funcionarios
        
        output_folder = obtener_carpeta_salida()
        total_funcionarios = obtener_total_funcionarios()
        print(f"‚úÖ Servicios: Carpeta={output_folder}, Total funcionarios={total_funcionarios}")
        
    except Exception as e:
        print(f"‚ùå Error en servicios: {str(e)}")
        return False
    
    # Test 3: Configuraci√≥n
    try:
        from config import Config
        print(f"‚úÖ Config: URI principal={Config.SQLALCHEMY_DATABASE_URI[:50]}...")
        print(f"‚úÖ Config: IAMC={Config.IAMC_DB_CONFIG['database']}")
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {str(e)}")
        return False
    
    # Test 4: Rutas
    try:
        from routes.qr_routes import qr_bp
        from routes.route_qrdata import qrdata_bp
        print(f"‚úÖ Rutas: QR={qr_bp.name}, QRData={qrdata_bp.name}")
        
    except Exception as e:
        print(f"‚ùå Error en rutas: {str(e)}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ ¬°SISTEMA COMPLETAMENTE MIGRADO Y FUNCIONAL!")
    print("\nüìã RESUMEN:")
    print("‚Ä¢ Base de datos IAMC: settings, qr_codes, users")
    print("‚Ä¢ Base de datos empresadb: sonacard (funcionarios)")
    print("‚Ä¢ Todas las conexiones: MSSQL con usuario sa")
    print("‚Ä¢ Backend: 100% migrado de PostgreSQL a MSSQL")
    print("‚Ä¢ Frontend: Sin cambios necesarios")
    
    return True

if __name__ == "__main__":
    test_complete_system()
