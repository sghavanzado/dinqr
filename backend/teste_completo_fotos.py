#!/usr/bin/env python3
"""
Script de teste completo para funcionalidade de fotos de funcion√°rios.
"""

import requests
import json
import os
from PIL import Image
import io

BASE_URL = "http://localhost:5000/api/iamc"

def criar_foto_teste():
    """Cria uma imagem de teste para upload."""
    # Criar uma imagem simples para teste (formato RGB)
    width, height = 300, 400  # Propor√ß√£o pr√≥xima a 3:4
    img = Image.new('RGB', (width, height), color='lightblue')
    
    # Adicionar texto simples
    try:
        from PIL import ImageDraw, ImageFont
        draw = ImageDraw.Draw(img)
        
        # Tentar usar fonte padr√£o
        try:
            font = ImageFont.truetype("arial.ttf", 20)
        except:
            font = ImageFont.load_default()
        
        # Desenhar texto
        text = "FOTO TESTE"
        draw.text((width//2-50, height//2-10), text, fill='darkblue', font=font)
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è N√£o foi poss√≠vel adicionar texto: {e}")
    
    # Salvar arquivo tempor√°rio
    test_image_path = "foto_teste.jpg"
    img.save(test_image_path, 'JPEG', quality=90)
    print(f"   üì∏ Foto de teste criada: {test_image_path}")
    
    return test_image_path

def testar_funcionarios_sem_foto():
    """Testa listagem de funcion√°rios (devem ter Foto: null)."""
    print("\nüìã 1. Testando listagem de funcion√°rios (sem fotos)...")
    
    try:
        response = requests.get(f"{BASE_URL}/funcionarios", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            funcionarios = data.get('funcionarios', [])
            
            print(f"   ‚úÖ {len(funcionarios)} funcion√°rios encontrados")
            
            for func in funcionarios[:2]:  # Mostrar apenas os primeiros 2
                foto_status = func.get('Foto', 'N/A')
                print(f"   ‚Ä¢ ID {func['FuncionarioID']}: {func['Nome']} {func['Apelido']} - Foto: {foto_status}")
            
            return funcionarios[0]['FuncionarioID'] if funcionarios else None
        else:
            print(f"   ‚ùå Erro {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return None

def testar_upload_foto(funcionario_id, foto_path):
    """Testa upload de foto para um funcion√°rio."""
    print(f"\nüì§ 2. Testando upload de foto para funcion√°rio ID {funcionario_id}...")
    
    try:
        url = f"{BASE_URL}/funcionarios/{funcionario_id}/foto"
        
        with open(foto_path, 'rb') as f:
            files = {'foto': ('foto_teste.jpg', f, 'image/jpeg')}
            response = requests.post(url, files=files, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Upload realizado com sucesso!")
            print(f"   üì∑ URL da foto: {data.get('foto_url', 'N/A')}")
            
            funcionario = data.get('funcionario', {})
            print(f"   üë§ Funcion√°rio: {funcionario.get('Nome', '')} {funcionario.get('Apelido', '')}")
            print(f"   üîó Arquivo: {funcionario.get('Foto', 'N/A')}")
            
            return data.get('foto_url')
        else:
            print(f"   ‚ùå Erro {response.status_code}: {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return None

def testar_info_foto(funcionario_id):
    """Testa obten√ß√£o de informa√ß√µes da foto."""
    print(f"\nüìã 3. Testando informa√ß√µes da foto do funcion√°rio ID {funcionario_id}...")
    
    try:
        url = f"{BASE_URL}/funcionarios/{funcionario_id}/foto"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Informa√ß√µes obtidas com sucesso!")
            print(f"   üì∑ URL: {data.get('foto_url', 'N/A')}")
            print(f"   üë§ Nome: {data.get('nome', 'N/A')}")
            return True
        else:
            print(f"   ‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def testar_visualizar_foto(foto_url):
    """Testa acesso direto ao arquivo de foto."""
    print(f"\nüñºÔ∏è 4. Testando visualiza√ß√£o direta da foto...")
    
    try:
        # Construir URL completa se necess√°rio
        if foto_url and not foto_url.startswith('http'):
            full_url = f"http://localhost:5000{foto_url}"
        else:
            full_url = foto_url
        
        response = requests.get(full_url, timeout=10)
        
        if response.status_code == 200:
            content_type = response.headers.get('content-type', '')
            content_length = len(response.content)
            
            print(f"   ‚úÖ Foto acess√≠vel!")
            print(f"   üìÑ Content-Type: {content_type}")
            print(f"   üìä Tamanho: {content_length} bytes")
            
            # Verificar se √© realmente uma imagem
            try:
                img = Image.open(io.BytesIO(response.content))
                print(f"   üñºÔ∏è Dimens√µes: {img.size[0]}x{img.size[1]} pixels")
                print(f"   üé® Formato: {img.format}")
                return True
            except Exception as img_error:
                print(f"   ‚ö†Ô∏è Arquivo n√£o √© uma imagem v√°lida: {img_error}")
                return False
        else:
            print(f"   ‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def testar_funcionario_com_foto(funcionario_id):
    """Testa se o funcion√°rio agora aparece com a foto nos dados."""
    print(f"\nüìã 5. Verificando dados do funcion√°rio com foto...")
    
    try:
        url = f"{BASE_URL}/funcionarios/{funcionario_id}"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            funcionario = response.json().get('funcionario', {})
            foto = funcionario.get('Foto')
            
            print(f"   ‚úÖ Dados atualizados!")
            print(f"   üë§ Nome: {funcionario.get('Nome', '')} {funcionario.get('Apelido', '')}")
            print(f"   üì∑ Foto: {foto if foto else 'Sem foto'}")
            
            return foto is not None
        else:
            print(f"   ‚ùå Erro {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return False

def main():
    """Executa todos os testes de foto."""
    print("üß™ TESTE COMPLETO - Fotos de Funcion√°rios")
    print("=" * 60)
    
    # 1. Criar foto de teste
    print("üì∏ Criando foto de teste...")
    foto_path = criar_foto_teste()
    
    try:
        # 2. Listar funcion√°rios
        funcionario_id = testar_funcionarios_sem_foto()
        if not funcionario_id:
            print("\n‚ùå N√£o foi poss√≠vel obter ID de funcion√°rio!")
            return
        
        # 3. Upload de foto
        foto_url = testar_upload_foto(funcionario_id, foto_path)
        if not foto_url:
            print("\n‚ùå Falha no upload da foto!")
            return
        
        # 4. Obter informa√ß√µes da foto
        testar_info_foto(funcionario_id)
        
        # 5. Visualizar foto diretamente
        testar_visualizar_foto(foto_url)
        
        # 6. Verificar dados atualizados
        testar_funcionario_com_foto(funcionario_id)
        
        print("\n" + "=" * 60)
        print("‚úÖ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("\nüéØ Funcionalidades Testadas:")
        print("   ‚úÖ Listagem de funcion√°rios com campo Foto")
        print("   ‚úÖ Upload de foto com processamento autom√°tico")
        print("   ‚úÖ Obten√ß√£o de informa√ß√µes da foto")
        print("   ‚úÖ Acesso direto ao arquivo de imagem")
        print("   ‚úÖ Atualiza√ß√£o dos dados do funcion√°rio")
        
        print("\nüöÄ Pr√≥ximos Passos:")
        print("   ‚Ä¢ Teste via Postman usando IAMC_Foto_Endpoints.json")
        print("   ‚Ä¢ Teste com diferentes formatos de imagem")
        print("   ‚Ä¢ Teste remo√ß√£o de foto (DELETE)")
        print("   ‚Ä¢ Integra√ß√£o com frontend")
        
    finally:
        # Limpar arquivo de teste
        try:
            os.remove(foto_path)
            print(f"\nüßπ Arquivo de teste removido: {foto_path}")
        except:
            pass

if __name__ == "__main__":
    main()
