"""
Script para inicializar tabelas IAMC com dados de exemplo
"""

from flask import Flask
from config import Config
from extensions import init_iamc_db, IAMCSession
from models.iamc_funcionarios_new import Funcionario, Departamento, Cargo
from models.iamc_presencas_new import Presenca, Licenca, Beneficio, FolhaSalarial, FuncionarioBeneficio
from datetime import datetime, date, time
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def criar_dados_exemplo():
    """Criar dados de exemplo nas tabelas IAMC"""
    
    print("üöÄ Inicializando dados de exemplo IAMC...")
    
    # Configurar Flask app
    app = Flask(__name__)
    app.config.from_object(Config)
    
    with app.app_context():
        # Inicializar IAMC
        success = init_iamc_db(app)
        if not success:
            print("‚ùå Erro ao inicializar IAMC")
            return False
        
        session = IAMCSession()
        
        try:
            print("\nüìã 1. Criando Departamentos...")
            
            # Verificar se j√° existem departamentos
            departamentos_existentes = session.query(Departamento).count()
            if departamentos_existentes > 0:
                print(f"   ‚ÑπÔ∏è {departamentos_existentes} departamentos j√° existem. Pulando cria√ß√£o.")
            else:
                departamentos = [
                    Departamento(
                        Nome="Tecnologia da Informa√ß√£o",
                        Descricao="Departamento respons√°vel pela gest√£o de sistemas e infraestrutura tecnol√≥gica"
                    ),
                    Departamento(
                        Nome="Recursos Humanos", 
                        Descricao="Departamento respons√°vel pela gest√£o de pessoal e benef√≠cios"
                    ),
                    Departamento(
                        Nome="Financeiro",
                        Descricao="Departamento respons√°vel pela gest√£o financeira e contabilidade"
                    )
                ]
                
                for dept in departamentos:
                    session.add(dept)
                
                session.commit()
                print(f"   ‚úÖ {len(departamentos)} departamentos criados!")
            
            print("\nüëî 2. Criando Cargos...")
            
            # Verificar se j√° existem cargos
            cargos_existentes = session.query(Cargo).count()
            if cargos_existentes > 0:
                print(f"   ‚ÑπÔ∏è {cargos_existentes} cargos j√° existem. Pulando cria√ß√£o.")
            else:
                cargos = [
                    Cargo(
                        Nome="Desenvolvedor Senior",
                        Descricao="Respons√°vel pelo desenvolvimento de sistemas e aplica√ß√µes",
                        Nivel="Senior"
                    ),
                    Cargo(
                        Nome="Analista de RH",
                        Descricao="Respons√°vel por processos de recursos humanos e recrutamento",
                        Nivel="Pleno"
                    ),
                    Cargo(
                        Nome="Contador",
                        Descricao="Respons√°vel pela contabilidade e gest√£o financeira",
                        Nivel="Pleno"
                    )
                ]
                
                for cargo in cargos:
                    session.add(cargo)
                
                session.commit()
                print(f"   ‚úÖ {len(cargos)} cargos criados!")
            
            print("\nüë• 3. Criando Funcion√°rios...")
            
            # Verificar se j√° existem funcion√°rios
            funcionarios_existentes = session.query(Funcionario).count()
            if funcionarios_existentes > 0:
                print(f"   ‚ÑπÔ∏è {funcionarios_existentes} funcion√°rios j√° existem. Pulando cria√ß√£o.")
            else:
                # Buscar departamentos e cargos criados
                dept_ti = session.query(Departamento).filter(Departamento.Nome == "Tecnologia da Informa√ß√£o").first()
                dept_rh = session.query(Departamento).filter(Departamento.Nome == "Recursos Humanos").first()
                dept_fin = session.query(Departamento).filter(Departamento.Nome == "Financeiro").first()
                
                cargo_dev = session.query(Cargo).filter(Cargo.Nome == "Desenvolvedor Senior").first()
                cargo_rh = session.query(Cargo).filter(Cargo.Nome == "Analista de RH").first()
                cargo_cont = session.query(Cargo).filter(Cargo.Nome == "Contador").first()
                
                funcionarios = [
                    Funcionario(
                        Nome="Jo√£o Silva",
                        Apelido="Silva",
                        BI="123456789LA041",
                        DataNascimento=date(1990, 5, 15),
                        Sexo="M",
                        EstadoCivil="Solteiro",
                        Email="joao.silva@empresa.com",
                        Telefone="+244 923 456 789",
                        Endereco="Rua da Paz, 123, Luanda",
                        DataAdmissao=date(2024, 1, 15),
                        EstadoFuncionario="Activo"
                    ),
                    Funcionario(
                        Nome="Maria Santos",
                        Apelido="Santos", 
                        BI="987654321LA042",
                        DataNascimento=date(1985, 8, 22),
                        Sexo="F",
                        EstadoCivil="Casada",
                        Email="maria.santos@empresa.com",
                        Telefone="+244 912 345 678",
                        Endereco="Avenida Marginal, 456, Luanda",
                        DataAdmissao=date(2023, 6, 10),
                        EstadoFuncionario="Activo"
                    ),
                    Funcionario(
                        Nome="Carlos Mendes",
                        Apelido="Mendes",
                        BI="456789123LA043", 
                        DataNascimento=date(1988, 12, 3),
                        Sexo="M",
                        EstadoCivil="Solteiro",
                        Email="carlos.mendes@empresa.com",
                        Telefone="+244 934 567 890",
                        Endereco="Rua dos Coqueiros, 789, Luanda",
                        DataAdmissao=date(2023, 9, 5),
                        EstadoFuncionario="Activo"
                    )
                ]
                
                for funcionario in funcionarios:
                    session.add(funcionario)
                
                session.commit()
                print(f"   ‚úÖ {len(funcionarios)} funcion√°rios criados!")
            
            print("\n‚è∞ 4. Criando Presen√ßas...")
            
            # Verificar se j√° existem presen√ßas
            presencas_existentes = session.query(Presenca).count()
            if presencas_existentes > 0:
                print(f"   ‚ÑπÔ∏è {presencas_existentes} presen√ßas j√° existem. Pulando cria√ß√£o.")
            else:
                # Buscar funcion√°rios criados
                funcionarios = session.query(Funcionario).limit(3).all()
                
                if funcionarios:
                    presencas = []
                    for i, funcionario in enumerate(funcionarios):
                        # Criar 3 registros de presen√ßa para cada funcion√°rio
                        for dia in range(1, 4):
                            presenca = Presenca(
                                FuncionarioID=funcionario.FuncionarioID,
                                Data=date(2024, 9, dia),
                                HoraEntrada=time(8, 0, 0),
                                HoraSaida=time(17, 0, 0),
                                Observacao=f"Presen√ßa normal - Dia {dia}"
                            )
                            presencas.append(presenca)
                    
                    for presenca in presencas:
                        session.add(presenca)
                    
                    session.commit()
                    print(f"   ‚úÖ {len(presencas)} registros de presen√ßa criados!")
                else:
                    print("   ‚ö†Ô∏è Nenhum funcion√°rio encontrado para criar presen√ßas")
            
            print("\nüéÅ 5. Criando Benef√≠cios...")
            
            # Verificar se j√° existem benef√≠cios
            beneficios_existentes = session.query(Beneficio).count()
            if beneficios_existentes > 0:
                print(f"   ‚ÑπÔ∏è {beneficios_existentes} benef√≠cios j√° existem. Pulando cria√ß√£o.")
            else:
                # Primeiro criar os tipos de benef√≠cios
                beneficios = [
                    Beneficio(
                        Nome="Seguro de Sa√∫de",
                        Descricao="Seguro de sa√∫de completo para funcion√°rios",
                        Tipo="Sa√∫de"
                    ),
                    Beneficio(
                        Nome="Vale Alimenta√ß√£o",
                        Descricao="Vale alimenta√ß√£o mensal",
                        Tipo="Alimenta√ß√£o"
                    ),
                    Beneficio(
                        Nome="Subs√≠dio de Transporte",
                        Descricao="Subs√≠dio para transporte p√∫blico",
                        Tipo="Transporte"
                    )
                ]
                
                for beneficio in beneficios:
                    session.add(beneficio)
                
                session.commit()
                print(f"   ‚úÖ {len(beneficios)} tipos de benef√≠cios criados!")
                
                # Agora associar benef√≠cios aos funcion√°rios
                funcionarios = session.query(Funcionario).limit(3).all()
                if funcionarios:
                    funcionario_beneficios = []
                    for i, funcionario in enumerate(funcionarios):
                        beneficio = beneficios[i]  # Associar cada funcion√°rio a um benef√≠cio diferente
                        
                        func_ben = FuncionarioBeneficio(
                            FuncionarioID=funcionario.FuncionarioID,
                            BeneficioID=beneficio.BeneficioID,
                            DataInicio=date(2024, 1, 1),
                            DataFim=date(2024, 12, 31),
                            Estado="Activo"
                        )
                        funcionario_beneficios.append(func_ben)
                    
                    for fb in funcionario_beneficios:
                        session.add(fb)
                    
                    session.commit()
                    print(f"   ‚úÖ {len(funcionario_beneficios)} associa√ß√µes funcion√°rio-benef√≠cio criadas!")
                else:
                    print("   ‚ö†Ô∏è Nenhum funcion√°rio encontrado para associar benef√≠cios")
            
            print("\nüí∞ 6. Criando Folhas Salariais...")
            
            # Verificar se j√° existem folhas salariais
            folhas_existentes = session.query(FolhaSalarial).count()
            if folhas_existentes > 0:
                print(f"   ‚ÑπÔ∏è {folhas_existentes} folhas salariais j√° existem. Pulando cria√ß√£o.")
            else:
                funcionarios = session.query(Funcionario).limit(3).all()
                
                if funcionarios:
                    folhas = []
                    for funcionario in funcionarios:
                        # Definir sal√°rio base fixo
                        salario_base = 150000.00
                        
                        folha = FolhaSalarial(
                            FuncionarioID=funcionario.FuncionarioID,
                            PeriodoInicio=date(2024, 9, 1),
                            PeriodoFim=date(2024, 9, 30),
                            SalarioBase=salario_base,
                            Bonificacoes=salario_base * 0.1,  # 10% de bonifica√ß√µes
                            Descontos=salario_base * 0.15,  # 15% de descontos (impostos, etc.)
                            DataPagamento=date(2024, 10, 5)  # Pagamento em 5 de outubro
                        )
                        folhas.append(folha)
                    
                    for folha in folhas:
                        session.add(folha)
                    
                    session.commit()
                    print(f"   ‚úÖ {len(folhas)} folhas salariais criadas!")
                else:
                    print("   ‚ö†Ô∏è Nenhum funcion√°rio encontrado para criar folhas salariais")
            
            print("\nüéâ Dados de exemplo criados com sucesso!")
            print("\nüìä Resumo dos dados criados:")
            print(f"   ‚Ä¢ Departamentos: {session.query(Departamento).count()}")
            print(f"   ‚Ä¢ Cargos: {session.query(Cargo).count()}")
            print(f"   ‚Ä¢ Funcion√°rios: {session.query(Funcionario).count()}")
            print(f"   ‚Ä¢ Presen√ßas: {session.query(Presenca).count()}")
            print(f"   ‚Ä¢ Benef√≠cios: {session.query(Beneficio).count()}")
            print(f"   ‚Ä¢ Funcion√°rio-Benef√≠cios: {session.query(FuncionarioBeneficio).count()}")
            print(f"   ‚Ä¢ Folhas Salariais: {session.query(FolhaSalarial).count()}")
            
            return True
            
        except Exception as e:
            session.rollback()
            print(f"‚ùå Erro ao criar dados: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
            
        finally:
            session.close()

if __name__ == "__main__":
    print("üîÑ Inicializador de Dados IAMC")
    print("=" * 50)
    
    sucesso = criar_dados_exemplo()
    
    if sucesso:
        print("\n‚úÖ Inicializa√ß√£o conclu√≠da com sucesso!")
        print("\nüß™ Agora voc√™ pode testar os endpoints IAMC:")
        print("   ‚Ä¢ GET /api/iamc/funcionarios")
        print("   ‚Ä¢ GET /api/iamc/departamentos")
        print("   ‚Ä¢ GET /api/iamc/presencas")
        print("   ‚Ä¢ GET /api/iamc/beneficios")
        print("   ‚Ä¢ GET /api/iamc/folha-salarial")
    else:
        print("\n‚ùå Falha na inicializa√ß√£o!")
    
    print("\n" + "=" * 50)
