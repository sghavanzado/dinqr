#!/usr/bin/env python3
"""
Script para corregir errores de indentaci√≥n en qr_routes.py
"""

import re
from pathlib import Path

def fix_qr_routes_indentation():
    """Corregir errores de indentaci√≥n en qr_routes.py"""
    file_path = Path("routes/qr_routes.py")
    
    if not file_path.exists():
        print(f"‚ùå No se encontr√≥ {file_path}")
        return False
    
    try:
        content = file_path.read_text(encoding='utf-8')
        
        # Patr√≥n para encontrar bloques finally problem√°ticos
        # Buscar: finally: seguido de if conn_local: seguido de comentario vac√≠o
        pattern = r'finally:\s*\n\s*if conn_local:\s*\n\s*# Conexi√≥n liberada autom√°ticamente\s*\n'
        replacement = '# Conexi√≥n se libera autom√°ticamente con context manager\n'
        
        content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
        
        # Tambi√©n corregir referencias a "base de datos local" que deber√≠an ser "IAMC"
        content = content.replace('base de datos local', 'base de datos IAMC')
        
        # Corregir bloques try-except-finally que no tienen c√≥digo en finally
        pattern2 = r'(\s*)finally:\s*\n\s*if [^:]+:\s*\n\s*# [^\n]*\n'
        replacement2 = r'\1# Conexi√≥n se libera autom√°ticamente\n'
        content = re.sub(pattern2, replacement2, content)
        
        file_path.write_text(content, encoding='utf-8')
        print(f"‚úÖ Corregidos errores de indentaci√≥n en {file_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error corrigiendo {file_path}: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    print("üîß CORRIGIENDO ERRORES DE INDENTACI√ìN")
    print("=" * 50)
    
    if fix_qr_routes_indentation():
        print("‚úÖ Correcci√≥n completada")
    else:
        print("‚ùå Error en la correcci√≥n")

if __name__ == "__main__":
    main()
